###### 应用文件变动 ######
git apply xx.diff

############################## git reset & revert ##################################
代码回退的场景
1.没有push,只是本地add、commit发现有问题，准备取消提交，使用以下命令：
	git reset --soft | --mixed | --hard
	--mixed //保留源码修改，只是将git commit和index信息回退到某一个版本
	--soft  //保留源码修改，只是将git commit信息回退到某一个版本，git index 不改变
	--hard  //源码也会回退到某个版本,commit和index 都会回退到某个版本

2.已经push到线上仓库，回退本地代码的同时也想回退线上仓库代码
	git revert	//用于反转提交，执行revert时，工作树必须clean
	git revert使用一个新的提交消除一个历史提交所做的修改
	revert之后本地的代码会回滚到指定的历史版本，意思就是剔除某次提交然后作为一次新的改动再提交，这样分支commit往前走
	同时丢弃不要的修改，达到回滚目的

reset 是在正常的commit历史中,删除了指定的commit,这时 HEAD 是向后移动了,而 revert 是在正常的commit历史中再commit一次,只不过是反向提交,他的 HEAD 是一直向前的

############################## git rebase ##################################
http://blog.csdn.net/hudashi/article/details/7664631

########################################## git 提交omx库代码示例 ##########################################
git remote add gerrit ssh://user@scgit.xxx.com:29418/av-restricted/platform/hardware/google/omx
repo sync . (更新当前代码库)
git add drivers/display/osd/osd_fb.c
git commit --amend       (shift+;  wq)
git push gerrit HEAD:refs/for/master(master可替换成你准备提交到的分支)


>>>>>>>>>>>>>>>>>>>>>>>>> git 撤销操作 >>>>>>>>>>>>>>>>>>>>>>>
（1）丢弃工作区的修改：git checkout -- filename
 (2) 修改了工作区的某一个文件内容，还添加到了暂存区，想要丢弃，分两步：a. 使用命令 git reset HEAD filename, 回到（1），然后按（1）操作
（3）已经提交不合适的修改到版本库，如果撤销，可以在没有推送到远程仓库时 回退版本: git reset --hard commit_id


  git checkout .                 ##本地所有修改但是并未commit,都返回到原始状态
  git stash                      ##把所有并未commit的修改暂存到stash里面，可使用 git stash pop 恢复
  git reset --hard  commit-id    ##返回到某一个节点，不保留修改
  git reset --soft  commit-id    ##返回到某一个节点，保留修改

  git branch -D xx               ##删除某一分支

<<<<<<<<<<<<<<<<<<<<<<<< git 撤销操作 <<<<<<<<<<<<<<<<<<<<<<<<
//gerrit code review
http://wiki-china.google.com/Platform/Kernel/3.14/Porting_Guide

1. 切换到待提交的分支
2. git pull
3. git add /your/file
4. git commit -s
5. git push /remote/branch
6. add code reviewer


<<<<<<<<<<<<<<<<<< 修改已commit的作者和邮箱名 <<<<<<<<<<<<<<<<<<

第一步：前往需要修改的版本
1、使用 git log 获取需要修改的版本id
2、使用 git reset –soft [版本号] 前往版本

第二步：修改信息
使用  git commit --amend --author='用户名 <邮箱>' 修改
在打开的文件中保存一下就可以了

第三步：提交代码
使用 git push

<<<<<<<<<<<<<<<<<<<<<<<<<< git忽略某一文件 <<<<<<<<<<<<<<<<<<<<<<<<<<<<

在版本库中创建.gitignore文件，将不需要跟踪的文件添加到该文件中,然后在
git status时不会再提示跟踪 .gitignore 中的文件


<<<<<<<<<<<<<<<<<<<<<<<<<< git中删除文件 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<
在被 git 管理的目录中删除文件时，可以选择如下两种方式来记录删除动作：
一、rm + git commit -am "abc"
二、git rm + git commit -m "abc"

//跟踪某一分支
git checkout branch_to_pull -t 


###################### 分支操作 ######################
1. 如果在两个不同的分支之中，对同一个文件的同一个部分进行了不同的修改，Git没法干净的合并它们
任何因包含合并冲突而有待解决的文件，都会以未合并状态标识出来。 Git 会在有冲突的文件中加入标准的冲突
解决标记，这样你可以打开这些包含冲突的文件然后手动解决冲突

这表示 HEAD 所指示的版本（也就是你的 master 分支所在的位置，因为你在运行 merge 命令的时候已经检出
到了这个分支）在这个区段的上半部分（======= 的上半部分），而 iss53 分支所指示的版本在 ======= 的
下半部分。 为了解决冲突，你必须选择使用由 ======= 分割的两部分中的一个，或者你也可以自行合并这些内
容

2. 删除某一分支
git branch -d  "branch_name"

3. 查看分支合并图
git log --graph



###################### git 删除操作 ######################
//rm 只是删除工作区，未“提交”, 没有删除暂存区的文件
rm test.txt
//git rm 相当于执行了两步
rm test.txt       --> 删除工作区内容
git add test.txt  --> 更新到暂存区


###################### git bug 管理 ######################
git stash        : 保存当前工作现场
git stash list   ：列出所有的git stash
git stash apply  ：恢复现场，保留stash内容
git stash drop   ：删除stash中保留的内容
git stash pop    ：恢复的同时把stash内容删除


###################### git 多人协作开发流程 ######################
多人协作的工作模式通常是这样：

首先，可以试图用git push origin branch-name推送自己的修改；

如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；

如果合并有冲突，则解决冲突，并在本地提交；

没有冲突或者解决掉冲突后，再用git push origin branch-name推送就能成功！

如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream branch-name origin/branch-name。

小结
查看远程库信息，使用git remote -v；

本地新建的分支如果不推送到远程，对其他人就是不可见的；

从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；

在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；

建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；

从远程抓取分支，使用git pull，如果有冲突，要先处理冲突

###################### git 生成patch  ######################

1.使用git format-patch生成所需要的patch:

当前分支所有超前master的提交：
git format-patch -M master

某次提交以后的所有patch:
git format-patch 4e16 --4e16指的是commit名

从根到指定提交的所有patch:
git format-patch --root 4e16

某两次提交之间的所有patch:
git format-patch 365a..4e16 --365a和4e16分别对应两次提交的名称

某次提交（含）之前的几次提交：
git format-patch –n 07fe --n指patch数，07fe对应提交的名称

故，单次提交即为：
git format-patch -1 07fe

git format-patch生成的补丁文件默认从1开始顺序编号，并使用对应提交信息中的第一行作为文件名。
如果使用了-- numbered-files选项，则文件名只有编号，不包含提交信息；如果指定了--stdout选项，可指定输出位置，如当所有patch输出到一个文件；可指定-o <dir>指定patch的存放目录；


2.应用patch：

先检查patch文件：git apply --stat newpatch.patch
检查能否应用成功：git apply --check newpatch.patch
打补丁：git am --signoff < newpatch.patch

xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
git log -S [keyword]  //搜索提交历史，根据关键词

git log --follow   [file]   //显示某个文件的版本历史，包括文件名改动

git log -p [file]   //显示某个文件每一次的diff

git shortlog -sn    //显示所有提交的用户，按提交次数排序

git show --name-only [commit]  //显示某次提交发生变化的文件名



git show [commit]:[filename]  //某次提交某个文件的内容


xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx git rebase xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
一点记录：



简要概括为：可以对某一段线性提交历史进行编辑、删除、复制、粘贴

1.使用git rebase 合并多个commit为一个commit

	git rebase -i (start_commit _id  end_commit_id]

然后可能会出现：
		pick e7ba81d Commit-1
		pick 5756e15 Commit-2
		pick b1b8189 Commit-3

	如果合并到一条commit并提交，可以修改为：
		pick e7ba81d Commit-1
		s 5756e15 Commit-2
		s b1b8189 Commit-3

	这样得到的就是一个Commit-1, commit 信息包含 Commit1 ~ 3

然后会出现：
	HEAD detached at 0e55424()
现在出现分支游离，HEAD指针不指向任何分支

解决办法：
	1. git branch temp_branch 0e55424
	2. git checkout branch_name/to/commit
	3. git merge temp_branch
	4. git push (branch_name/to/commit)

pick：  保留该commit（缩写:p）
reword：保留该commit，但我需要修改该commit的注释（缩写:r）
edit：  保留该commit, 但我要停下来修改该提交(不仅仅修改注释)（缩写:e）
squash：将该commit和前一个commit合并（缩写:s）
fixup： 将该commit和前一个commit合并，但不要保留该提交的注释信息（缩写:f）
exec：  执行shell命令（缩写:x）
drop：  我要丢弃该commit（缩写:d)




2. 使用git rebase将某一段commit(多个)粘贴到另一个分支上

	git rebase   (start_commit _id  end_commit_id]  --onto  master

比如：将test分支的 cmtid_0 ~ cmtid_6 合并到master分支
	git rebase   cmtid_0^  cmtid_6  --onto  master //考虑左开右闭区间

3.HEAD detached at 86b3e19
如何删除
	
xxxxxxxxxxxxxxxxxxxxxxx git 分支总结 xxxxxxxxxxxxxxxxxxxxxx
 //查看各个分支当前所指对象
git log --decorate 

HEAD 可以想象为当前分支的别名，git使用HEAD指针确认当前所在分支

//HEAD指针指向testing分支了
git checkout testing  

//输出提交历史，各个分支的指向以及项目的分支分叉情况
git log --oneline --decorate --graph --all

"master" 是运行git init 时默认的起始分支名字
"origin"  是当你运行git clone时默认的远程仓库的名字，例如：origin/master

//更新远程仓库
git fetch origin

//查看本地分支与远程分支的提交进度
git branch -vv

//rebase命令将提交到某一个分支的所有修改都移至另外一个分支
//变基是将一系列提交按照原有次序依次应用到另外一个分支上
假设当前分支为：experiment
目标基底分支为：master

git checkout experiment
git rebase master
git checkout master
git merge experiment

//取出client分支，找出处于client分支和server分支的共同祖先之后的修改
//然后把它们在master分支上重演一遍

git rebase --onto master server client

//将server分支的修改整合到master分支
git rebase master server
//然后快进合并到master分支
git checkout master
git merge server

//创建分支new_branch并使其指向 ab1f23da (commit_id)
git checkout new_branch  ab1f23da 

//下述命令会在你的 .git/config 文件中添加一个小节，并在其中指定远程版本库的名称（origin）、URL 和
//一个用于获取操作的引用规格（refspec）
 git remote add origin https://github.com/schacon/simplegit-progit

//添加小节如下
[remote "origin"]
	url = https://github.com/schacon/simplegit-p
	fetch = +refs/heads/*:refs/remotes/origin

xxxxxxxxxxxxxxxxxxxxxxx git 查看文件改动 xxxxxxxxxxxxxxxxxxxxxx
git-diff - Show changes between commits, commit and working tree, etc

git diff:				比较工作区和暂存区
git diff --cached:		比较暂存区与最新本地版本库（本地库中最近一次commit的内容）	
git diff HEAD:			比较工作区与最新本地版本库

比较工作区与指定commit-id的差异

　　git diff commit-id  [<path>...] 

比较暂存区与指定commit-id的差异

　　git diff --cached [<commit-id>] [<path>...] 

比较两个commit-id之间的差异

　　git diff [<commit-id>] [<commit-id>]


使用git diff打补丁

git diff > xx.patch

git diff --cached > xx.patch 	//是将我们暂存区与版本库的差异做成补丁

git diff --HEAD > xx.patch 		//是将工作区与版本库的差异做成补丁

git diff Testfile > xx.patch 	//将单个文件做成一个单独的补丁


拓展：git apply xx.patch 应用补丁

检验一下补丁能否应用，
	
	git apply --check patch 

如果没有任何输出，那么表示可以顺利接受这个补丁

另外可以使用git apply --reject patch将能打的补丁先打上，有冲突的会生成.rej文件，此时可以找到这些文件进行手动打补丁

xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx git pull 产生的 Merge branch of ... xxxxxxxxxxxxxxxxxxxx
当前分支结构如下：

a - b -c (master)
    |
    d(origin/master)

情景如下：
本地拉取的最新remote版本是 b，并且在b的基础之上提交本地仓库，节点到达c，并未push到远程仓库
其他开发者在b的基础上提交d，并且已经merge入远程仓库，这样本地git pull就会出现Merge branch of..的问题，甚至是冲突

git pull = git fetch + git merge

解决办法：1. git pull --rebase,执行变基，有冲突手动解决
          2. git config --global pull.rebase true
